!!#   $Id: band.F90 149 2006-10-26 16:29:08Z antst $

#include "math_def.h"

Program bandfull
      Use transport
      Use ando_module
      Use atoms_module
      Use geometry_module
      Use structure
      Use supercell
      Use hamiltonian
      Use logging
      Use sparse_solvers
      Use bzgrid
      Use readcfg
      Use rotations
      Implicit None
      Include 'mpif.h'

      Integer, Parameter :: clen = 200

      Type (t_atoms_set) :: atoms
      Type (t_bandopts) :: opt
      Type (t_geometry) :: bgeo, tbgeo
      Type (t_strconst) :: bsc
      Type (t_mathop) :: msys, bsk
      Type (t_potpar_mats) :: bpar
      Type (t_ando_options) :: aopts
      Type (t_ando_sollution) :: ando
      Real (Kind=DEF_DBL_PREC), Pointer :: k (:, :), ek (:, :)
      Real (Kind=DEF_DBL_PREC) :: stE, en, pi, rydberg
      Integer :: is, n, nh, nn, j, nmod, i
      Integer :: bandf (2) = (/ 292, 293 /)
!!$       Integer :: ebandf (2) = (/ 294, 295 /)
      Complex (Kind=DEF_DBL_PREC), Pointer :: ons (:, :)
      Complex (Kind=DEF_DBL_PREC), Pointer :: ofs (:, :)
      Complex (Kind=DEF_DBL_PREC), Pointer :: hops (:, :)
      Complex (Kind=DEF_DBL_PREC), Pointer :: ham (:, :)
      Complex (Kind=DEF_DBL_PREC) :: ph
      Real (Kind=DEF_DBL_PREC), Pointer :: rotm (:, :)
      Integer :: npars
      Real (Kind=DEF_DBL_PREC) :: kk, k1, dffact
      Integer :: nb, nc, ngc (3), ngr (3)
      Complex (Kind=DEF_DBL_PREC) :: fact
      Integer :: lwork, info, mdf, nd, pohops
      Complex (Kind=DEF_DBL_PREC), Pointer :: work (:)
      Real (Kind=DEF_DBL_PREC), Pointer :: rwork (:), ev (:), kdf (:)
      Integer, Pointer :: iwork (:)
      Character (Len=clen) :: cwork
      Integer :: neloops, loop
!!$ MPI vars
      Integer :: ierr, my_mpi_id, local_comm, solve_comm, mpi_sz, root = 0, solsize
      Integer :: mpi_loc_id

      pi = 4.d0 * datan (1.d0)
      rydberg = 0.5d0 * 27.211396d0

      Call mpi_init (ierr)
      solve_comm = mpi_comm_world
      Call mpi_comm_rank (solve_comm, my_mpi_id, ierr)
      Call mpi_comm_size (solve_comm, mpi_sz, ierr)

      Log_Level = - 1
      If (my_mpi_id == root) Then
!!$          Call unlink ('outp')
         Log_Level = 1
      End If

#ifdef _VERS_
      Call do_log (1, 'Band code v'//_VERS_//' by Antst')
#else
      Call do_log (1, 'Band code vXXXX by Antst')
#endif

      Call band_config_init (opt)
!!$       Log_Level = opt%loglvl
      Call MPI_COMM_SPLIT (solve_comm, my_mpi_id, 0, local_comm, ierr)
      solsize = 1

      Call mpi_comm_rank (local_comm, mpi_loc_id, ierr)

!!$       Allocate (jobs(mpi_sz))
      If (my_mpi_id == root) Then
         Log_Level = opt%loglvl
         Open (Unit=bandf(1), File='plotup.b', Action='write')
         Open (Unit=bandf(2), File='plotdown.b', Action='write')
      Else
!!$ uncomment line bellow if you want output from rest of CPUs
!!$     Log_Level=opt%loglvl
         Write (cwork, '(i2.2)') my_mpi_id
         Write (logfilename, '("log.",A)') trim (cwork)
      End If

      If (mpi_loc_id == 0) Then

         If (opt%po%kind <= 3) Then
            atoms = read_atoms ('atomlist')
            tbgeo = read_geom ('geom_b', atoms)
            pohops = 1
            If (opt%po%kind == 3) pohops = 2

            bgeo = make_leadgeom (tbgeo, pohops, 1)

            Call free_geom (tbgeo)

            rotm => prep_rot_mask (bgeo,opt%po)

            bsc = calc_screal (bgeo, 1)
            Call make_sk (bsk, bsc, opt%kpar, 1)
         End If

         stE = (opt%eE-opt%bE) / (opt%nE-1)
         en = opt%bE

!!$      Open (Unit=ebandf(1), File='bandup', Action='write')
!!$      Open (Unit=ebandf(2), File='banddown', Action='write')

         aopts%use_ev_solver = opt%actl%gensol
         aopts%dir = 1
         aopts%usestates = 1
         aopts%needEmb = 0
         aopts%needBound = 0
         aopts%refine = opt%actl%refine
         aopts%usestates = opt%actl%specpart
         aopts%need_split = 1

         If (opt%po%kind .Le. 3) Then

            If ( opt%sdcdir /= 0) Then
               aopts%rotm = spinrm (rotm(:, 1:1))
            End If

            Call prep_dec_idx (bgeo, aopts%split_idx)

            n = bsc%nrows / pohops
            nh = pohops

            Allocate (ons(bsc%nrows, bsc%nrows))
            Allocate (ofs(bsc%nrows, bsc%nrows))
            Allocate (hops(n, n*(nh+1)))
            Allocate (ham(n, n))
            lwork = 4 * n
!!$        lwork = 2 * n ** 2 + 5 * n + 1
            Allocate (work(lwork))
            Allocate (rwork(lwork))
            Allocate (iwork(lwork))
            Allocate (ev(n))

            Allocate (k(bsc%nrows+2, 2))
            Allocate (ek(bsc%nrows+1, 2))
            ph = Exp (DEF_cmplx_Ione*DEF_M_PI)
            npars = 0

         Else If (opt%po%kind .Eq. 5) Then

            pohops = 1
            aopts%usestates = 1.0d0
            nb = 2
            nc = 2 * nb
            n = nc * opt%po%ngrid
            nh = pohops

            If (aopts%need_split == 1) Call prep_ham_idx (opt%po%ngrid, nb, aopts%split_idx)

            If (opt%po%rot_mask /= 0) Then
               rotm => read_rot_mask (n)
            Else
               Allocate (rotm(2, n))
               rotm (:, :) = 0.d0
            End If

            Allocate (ons(n, n))
            Allocate (ofs(n, n))
            Allocate (hops(n, n*(nh+1)))

            lwork = 4 * n
            Allocate (work(lwork))
            Allocate (rwork(lwork))
            Allocate (iwork(lwork))
            Allocate (ev(n))
            Allocate (k(n+2, 2))

         End If

         mdf = pohops
         dffact = 1.0d0 / real (mdf, kind=8)
!!$      Allocate (mine(mdf))
         Allocate (kdf(mdf))

      End If

      neloops = ceiling (opt%nE/real(mpi_sz/solsize, kind=DEF_DBL_PREC))

      Do loop = 0, neloops - 1
         nn = 1 + loop * (mpi_sz/solsize) + my_mpi_id
         Write (cwork, '("Doing calculation for ie=",i5)') nn
         Call do_log (1, trim(cwork))

         en = opt%bE + stE * real (nn-1, kind=DEF_DBL_PREC)

         If (opt%po%kind .Le. 3) Then

            Call calc_potpar (atoms, opt%atopt, en)

!!$ Prepare potential parameters matrices for leads
            bpar = make_ppar_full (bgeo, opt%po, rotm)

            Call prep_system (msys, bsk, bpar, opt%po, 1)

         Else If (opt%po%kind == 5) Then

            opt%po%energy = en
            ngc (1) = opt%po%ngridx
            ngc (2) = opt%po%ngridy
            ngc (3) = opt%po%ngridz
            ngr (:) = ngc (:)

            Call prep_system (msys, opt%po, ngc, ngr, opt%kpar, rotm)

         End If

         ons = sptofull (msys%c)
         ofs = sptofull (msys%r)

         Call free_mathop (msys)
         hops (1:n, 1:n) = ons (1:n, 1:n)
         hops (1:n, n+1:n+nh*n) = ofs (n*nh-n+1:n*nh, 1:nh*n)

!!$ Solve ando problem
         Call solve_ando (ofs, hops, n, nh, ando, aopts)

         Do is = 1, 2
            nmod = ando%Snin (is)
            k (1, is) = en
            k (2, is) = real (nmod, kind=DEF_DBL_PREC)
            Do i = 1, nmod, 1
               k (i+2, is) = Abs (imag(Log(ando%lin(ando%mask_in(i, is)))))
               kk = k (i+2, is) * dffact

!!$                If (mdf > 1) Then
!!$                   Do nd = 1, mdf
!!$                      ham = hops (1:n, 1:n)
!!$                      k1 = dffact * real (Int(nd/2), kind=8) * 2.0d0 * DEF_M_PI - real ((-1)**nd, kind=8) * kk
!!$                      kdf (nd) = k1
!!$                      Do j = 1, nh
!!$                         fact = Exp (DEF_cmplx_Ione*k1*real(j, kind=8))
!!$                         ham = ham + (hops(:, j*n+1:(j+1)*n)*fact) + transpose (conjg(hops(:, &
!!$                        & j*n+1:(j+1)*n)*fact))
!!$                      End Do
!!$                      Call zheevd ('N', 'U', n, ham, n, ev, work, lwork, rwork, lwork, iwork, lwork, info)
!!$                      If (info /= 0) Then
!!$                         Write (*,*) 'EV problem'
!!$                         Stop
!!$                      End If
!!$                      If (minval(Abs(ev)) < opt%ucrit) kk = k1
!!$                   End Do
!!$               Write (ebandf(is), '(2(1x,f12.8))') kk, en
!!$                End If

            End Do

            If (opt%po%kind .Le. 3) Then
               k (nmod+3:bsc%nrows+2, is) = 0.0 / 0.0
!!$           Write (bandf(is), '(250(1x,f12.8))') en, (k(j), j=1, bsc%nrows)
            Else If (opt%po%kind .Eq. 5) Then
               k (nmod+3:n+2, is) = 0.0 / 0.0
            End If

         End Do

         If (opt%po%kind .Le. 3) Then
            Call log_bands (solve_comm, root, k, bsc%nrows+2, bandf)
         Else If (opt%po%kind .Eq. 5) Then
            Call log_bands (solve_comm, root, k, n+2, bandf)
         End If

         If (opt%po%kind .Le. 3) Call free_ppar_f (bpar)
         en = en + stE
      End Do
!!$   Close (Unit=ebandf(1))
!!$   Close (Unit=ebandf(2))

      If (my_mpi_id == root) Then
         Close (Unit=bandf(1))
         Close (Unit=bandf(2))
      End If

      Call MPI_Barrier (solve_comm, ierr)

      Call mpi_finalize (ierr)

      Call do_log (1, 'Done!')

Contains
      Subroutine log_bands (comm, root, k, n, bandf)
         Implicit None
         Integer :: root, bandf (2), n, comm
         Real (Kind=DEF_DBL_PREC) :: k (n, 2)
!!$ Locals
         Integer :: ierr, procnum, mpi_sz, my_mpi_id
         Integer :: status (MPI_STATUS_SIZE)
         Integer :: is, j, nmod
         Call mpi_comm_rank (comm, my_mpi_id, ierr)
         Call mpi_comm_size (comm, mpi_sz, ierr)
         If (my_mpi_id /= root) Then
            Call MPI_Send (k, n*2, MPI_DOUBLE_PRECISION, root, my_mpi_id+mpi_sz+1000, comm, ierr)
         Else
            Do is = 1, 2
               nmod = Int (k(2, is))
               Do j = 1, nmod
                  Write (bandf(is), '(2(1x,f12.8))') k (j+2, is), k (1, is)
               End Do
!!$            Write (bandf(is), '(250(1x,f12.8))') (k(j, is), j=1, n)
            End Do
            Do procnum = 2, mpi_sz
               Call MPI_Recv (k, n*2, MPI_DOUBLE_PRECISION, procnum-1, procnum+mpi_sz+999, comm, status, &
              & ierr)
               Do is = 1, 2
                  nmod = Int (k(2, is))
                  Do j = 1, nmod
                     Write (bandf(is), '(2(1x,f12.8))') k (j+2, is), k (1, is)
                  End Do
!!$               Write (bandf(is), '(250(1x,f12.8))') (k(j, is), j=1, n)
               End Do
            End Do
            flush (bandf(1))
            flush (bandf(2))
         End If

      End Subroutine log_bands

End Program bandfull
